__author__ = 'patrick'
import pygame as pg
import random
pg.init()

white = (255,255,255)
red = (255,0,0)
blue = (0,0,255)
green = (0,255,0)
black = (0,0,0)
pink = (255,20,147)


clock = pg.time.Clock()

font = pg.font.Font(None, 25)
frame_count = 0
frame_rate = 60
start_time = 180

from textbox import TextBox
menuDisplay = pg.display.set_mode((1200,600))
pg.display.set_caption("D3 Virtual Robot")

gameExit = False

import os
import sys
import pygame as pg

from textbox import TextBox


KEY_REPEAT_SETTING = (200,70)


class Control(object):
    def __init__(self):
        pg.init()
        pg.display.set_caption("Input Box")
        self.red = []
        self.blue = []
        self.green = []
        self.colour = ""
        self.num_items = 0
        self.time = 0
        self.frame_count = 0
        self.frame_rate = 60
        self.start_time = 180
        self.screen = menuDisplay
        self.clock = pg.time.Clock()
        self.robot_loc = []
        self.fps = 60.0
        self.done = False
        self.input = TextBox((820,100,150,30),command=self.get_input,
                              clear_on_enter=True,inactive_on_enter=False)
        self.user_input = ""
        self.color = white
        self.prompt = self.make_prompt('Please input type you want to search')
        pg.key.set_repeat(*KEY_REPEAT_SETTING)


    def make_prompt(self,Message):
        pg.draw.rect(menuDisplay , white,(820,35,400,50))
        font = pg.font.SysFont("arial", 15)
        message = Message
        rend = font.render(message, True, pg.Color("black"))
        return (rend, rend.get_rect(topleft=(820,35)))

    def event_loop(self):
        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.done = True
            self.input.get_event(event)

    def change_color(self,id,color):
        try:
            self.color = pg.Color(str(color))
        except ValueError:
            print("Please input a valid color name.")

    def random_types(self):
        names = ["item1", "item2", "item3", "item4", "item5"]
        for i in range(50):
            item = random.randint(1,3)
            radx = random.randint(0,790)
            rady = random.randint(0,590)
            radp = random.randint(1,20)
            radnum = random.randint(1,5) - 1
            radn = names[radnum]
            coords = [radx,rady,radp,radn]

            if item == 1:
                pg.draw.rect(menuDisplay , red,(radx,rady,10,10))
                self.red.append(coords)
            elif item == 2:
                pg.draw.rect(menuDisplay , blue,(radx,rady,10,10))
                self.blue.append(coords)
            elif item == 3:
                pg.draw.rect(menuDisplay, green,(radx,rady,10,10))
                self.green.append(coords)
            i = i +1
        print(self.red)
        print(self.green)
        print(self.blue)

    def get_input(self,id,input):
        try:
            self.user_input = input
            self.colour = input
            print(self.user_input)
            if self.user_input == "red" or self.user_input == "blue" or self.user_input == "green":
                self.prompt = self.make_prompt('Where do you want to start : e.g. NW')
                self.input = TextBox((820,100,150,30),command=self.robot_start,
                              clear_on_enter=True,inactive_on_enter=False)
            if input == "red":
                for coord in self.red:
                    x = coord[0]
                    y = coord[1]
                    pg.draw.rect(menuDisplay, red,(x,y,15,15))

            if input == "blue":
                for coord in self.blue:
                    x = coord[0]
                    y = coord[1]
                    pg.draw.rect(menuDisplay, blue,(x,y,15,15))

            if input == "green":
                for coord in self.green:
                    x = coord[0]
                    y = coord[1]
                    pg.draw.rect(menuDisplay, green,(x,y,15,15))
            self.screen = menuDisplay 

        except ValueError:
            print("ERROR")

    def robot_start(self,id,input):
        self.robot_loc = input
        if input == "N":
            pg.draw.rect(menuDisplay, pink,(400,0,20,30))
            self.robot_loc = [400,0]
        elif input == "E":
            pg.draw.rect(menuDisplay, pink,(750,300,20,30))
            self.robot_loc = [750,300]
        elif input == "S":
            pg.draw.rect(menuDisplay, pink,(400,550,20,30))
            self.robot_loc = [400,550]
        elif input == "W":
            pg.draw.rect(menuDisplay, pink,(10,300,20,30))
            self.robot_loc = [10,300]
        elif input == "NW":
            pg.draw.rect(menuDisplay, pink,(10,10,20,30))
            self.robot_loc = [10,10]
        elif input == "NE":
            pg.draw.rect(menuDisplay, pink,(750,10,20,30))
            self.robot_loc = [750,10]
        elif input == "SW":
            pg.draw.rect(menuDisplay, pink,(10,550,20,30))
            self.robot_loc = [10,550]
        elif input == "SE":
            pg.draw.rect(menuDisplay, pink,(750,550,20,30))
            self.robot_loc = [750,550]

        self.prompt = self.make_prompt('Please enter the number of items you want to find')
        self.input = TextBox((820,100,150,30),command=self.number_of_items,
                        clear_on_enter=True,inactive_on_enter=False)

    def number_of_items(self,id,input):
        self.num_items = int(input)
        self.prompt = self.make_prompt('Please enter the time you allowing')
        self.input = TextBox((820,100,150,30),command=self.input_time,
                        clear_on_enter=True,inactive_on_enter=False)

    def input_time(self,id,input):

        self.time = input
        self.start_time = int(self.time) * 60

    def main_program(self):
        clock = pg.time.Clock()
        while not self.done:
            self.event_loop()
            pg.draw.rect(menuDisplay, white,(850,550,200, 20))
            total_seconds = self.frame_count // self.frame_rate
            total_seconds = self.start_time - (self.frame_count // self.frame_rate)
            if total_seconds < 0:
                total_seconds = 0
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            output_string = "Time left: {0:02}:{1:02}".format(minutes, seconds)
            text = font.render(output_string, True, black)
            menuDisplay.blit(text, [850, 550])
            if output_string == "Time left: 00:00":
                self.done = True
            self.frame_count += 1
            clock.tick(frame_rate)
            print("")
            pg.display.flip()
        pg.quit()

    def collide(x1, x2, y1, y2, w1, w2, h1, h2):
        print("colour: %s" % [menuDisplay.get_at((w1,h1))])
        done = False
        #while done ==False:


	    #if x1+w1>x2 and x1<x2+w2 and y1+h1>y2 and y1<y2+h2:return True
	    #else:return

    def bubbleSort(self,colourL):
        for passnum in range(len(colourL)-1,0,-1):
            for i in range(passnum):
                if colourL[i][2]>colourL[i+1][2]:
                    temp = colourL[i]
                    colourL[i] = colourL[i+1]
                    colourL[i+1] = temp

    def robot_move(self):
        i = 0
        if self.colour == "red":
            self.bubbleSort(self.red)
            locations = self.red
        elif self.colour == "blue":
            self.bubbleSort(self.blue)
            locations = self.blue
        elif self.colour == "green":
            self.bubbleSort(self.green)
            locations = self.green
            pg.draw.rect(menuDisplay, white,(self.robot_loc[0],self.robot_loc[1],20,30))
        print(locations)
        while i != self.num_items :

            nextX = locations[i][0]
            nextY = locations[i][1]
            #print(nextX,nextY,self.robot_loc,i,self.num_items)
            if self.robot_loc[0] == nextX and self.robot_loc[1] == nextY:
                pg.draw.rect(menuDisplay, black,(nextX,nextY ,15,15))
                i = i + 1
            elif self.robot_loc[0] < nextX:
                #self.collide(self.robot_loc[0],self.robot_loc[1], self.robot_loc[0]+20, self.robot_loc[1]+30, self.robot_loc[0]+21, self.robot_loc[0]+21, self.robot_loc[1], self.robot_loc[1]+30)
                pg.draw.rect(menuDisplay, white,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.robot_loc[0] = self.robot_loc[0] + 1
                pg.draw.rect(menuDisplay, pink,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.input.draw(self.screen)
            elif self.robot_loc[1] < nextY:
                #pg.draw.rect(menuDisplay,white,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.robot_loc[1] = self.robot_loc[1] + 1
                pg.draw.rect(menuDisplay, pink,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.input.draw(self.screen)
            elif self.robot_loc[0] > nextX:
                pg.draw.rect(menuDisplay, white,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.robot_loc[0] = self.robot_loc[0] - 1
                pg.draw.rect(menuDisplay, pink,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.input.draw(self.screen)
            elif self.robot_loc[1] > nextY:
                pg.draw.rect(menuDisplay, white,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.robot_loc[1] = self.robot_loc[1] - 1
                pg.draw.rect(menuDisplay, pink,(self.robot_loc[0],self.robot_loc[1],20,30))
                self.input.draw(self.screen)

            self.input.draw(self.screen)
            self.screen.blit(*self.prompt)
            clock.tick(200)

            pg.display.update()
        self.clock.tick(self.fps)
        if self.time != 0:
            self.done = True


        #self.collide(self.robot_loc[0], self.robot_loc[0] + 3 , self.robot_loc[1], self.robot_loc[1]+ 6, )

    def main_loop(self):
        self.random_types()
        while not self.done:
            self.event_loop()
            self.input.update()
            self.input.draw(self.screen)
            self.screen.blit(*self.prompt)

            pg.display.update()
            self.clock.tick(self.fps)
            if self.time != 0:
                self.done = True
        self.done = False
        if self.time != 0:
            while not self.done:
                self.event_loop()
                self.robot_move()
                #self.done = True
                #self.main_program()


menuDisplay.fill(white)
pg.draw.rect(menuDisplay , black,(800,0,10,600))
app = Control()
app.main_loop()


pg.display.update()
pg.quit()
quit()
